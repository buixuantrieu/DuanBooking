// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Role {
  id          Int        @id @default(autoincrement())
  roleName    String
  description String
  isDelete    Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  UserRole    UserRole[]
}

model UserRole {
  id     Int    @id @default(autoincrement())
  roleId Int
  role   Role   @relation(fields: [roleId], references: [id])
  userId String
  user   User   @relation(fields: [userId], references: [id])
}

model User {
  id             String         @id
  status         Int
  userName       String
  password       String
  email          String         @unique
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  profile        Profile?
  activationCode Int
  userSetting    UserSetting?
  userLog        UserLog?
  Partner        Partner?
  UserRole       UserRole[]
  Room           Room[]
  Favorite       Favorite[]
  Review         Review[]
  Comment        Comment[]
  Booking        Booking[]
  Notification   Notification[]
}

model Profile {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @unique
  fullName    String?
  phone       String?
  dateOfBirth DateTime? @db.Date
  gender      Int?
  avatar      String?   @db.MediumText
  address     String?
  districtId  Int?
  provinceId  Int?
  wardId      Int?
  updatedAt   DateTime  @updatedAt
}

model UserSetting {
  id             Int      @id @default(autoincrement())
  user           User     @relation(fields: [userId], references: [id])
  userId         String   @unique
  themeDark      Boolean  @default(false)
  isNotification Boolean  @default(true)
  isReceiveEmail Boolean  @default(true)
  updatedAt      DateTime @updatedAt
}

model UserLog {
  id          Int      @id @default(autoincrement())
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @unique
  actionType  String?
  description String?
  createdAt   DateTime @default(now())
}

model Partner {
  id                   Int      @id @default(autoincrement())
  isApproved           Boolean  @default(false)
  paymentAccountMethod String
  paymentAccountType   String
  paymentAccountInfo   String
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  user                 User     @relation(fields: [userId], references: [id])
  userId               String   @unique
  isActive             Boolean  @default(true)
}

model Room {
  id            Int           @id @default(autoincrement())
  isApproved    Boolean       @default(false)
  image         String        @db.Text
  title         String        @db.Text
  roomName      String        @db.Text
  description   String        @db.LongText
  location      String        @db.Text
  status        Int           @default(1)
  pricePerNight Float
  view          Int           @default(0)
  isDelete      Boolean       @default(false)
  createAt      DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  roomTypeId    Int
  roomType      RoomType      @relation(fields: [roomTypeId], references: [id])
  partnerId     String
  user          User          @relation(fields: [partnerId], references: [id])
  provinceId    Int
  province      Province      @relation(fields: [provinceId], references: [province_id])
  districtId    Int
  district      District      @relation(fields: [districtId], references: [district_id])
  wardId        Int
  ward          Wards         @relation(fields: [wardId], references: [wards_id])
  RoomAmenity   RoomAmenity[]
  RoomImage     RoomImage[]
  Favorite      Favorite[]
  Review        Review[]
  Comment       Comment[]
  Booking       Booking[]
}

model Favorite {
  id     Int    @id @default(autoincrement())
  userId String
  user   User   @relation(fields: [userId], references: [id])
  roomId Int
  room   Room   @relation(fields: [roomId], references: [id])
}

model RoomType {
  id          Int      @id @default(autoincrement())
  typeName    String
  description String
  imageUrl    String   @db.Text
  isDelete    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Room        Room[]
}

model Amenity {
  id          Int           @id @default(autoincrement())
  amenityName String
  description String
  imageUrl    String        @db.Text
  isDelete    Boolean       @default(false)
  createdAt   DateTime      @default(now())
  updatedAd   DateTime      @updatedAt
  RoomAmenity RoomAmenity[]
}
model RoomAmenity {
  id        Int     @id @default(autoincrement())
  amenityId Int
  amenity   Amenity @relation(fields: [amenityId], references: [id])
  roomId    Int
  room      Room    @relation(fields: [roomId], references: [id])
}

model RoomImage {
  id     Int    @id @default(autoincrement())
  image  String @db.Text
  roomId Int
  room   Room   @relation(fields: [roomId], references: [id])
}

model Review {
  id        Int      @id @default(autoincrement())
  roomId    Int
  room      Room     @relation(fields: [roomId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  rate      Int
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id        Int      @id @default(autoincrement())
  roomId    Int
  room      Room     @relation(fields: [roomId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Booking {
  id           Int      @id @default(autoincrement())
  checkIn      DateTime
  checkOut     DateTime
  customerName String
  email        String
  phone        String
  totalPrice   Float
  createdAt    DateTime @default(now())
  customerId   String
  user         User     @relation(fields: [customerId], references: [id])
  roomId       Int
  room         Room     @relation(fields: [roomId], references: [id])
  Payment      Payment?
}

model Payment {
  id            Int      @id @default(autoincrement())
  amount        Float
  paymentMethod String
  paymentDate   DateTime @updatedAt
  status        Int
  bookingId     Int      @unique
  booking       Booking  @relation(fields: [bookingId], references: [id])
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  message   String
  isWatched Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Province {
  province_id Int        @id @map("province_id")
  name        String     @map("name") @db.VarChar(64)
  District    District[]
  Room        Room[]

  @@map("province")
}

model District {
  district_id Int      @id @map("district_id")
  province_id Int
  name        String   @map("name") @db.VarChar(64)
  Province    Province @relation(fields: [province_id], references: [province_id])
  Wards       Wards[]
  Room        Room[]

  @@map("district")
}

model Wards {
  wards_id    Int      @id @map("wards_id")
  district_id Int
  name        String   @map("name") @db.VarChar(64)
  District    District @relation(fields: [district_id], references: [district_id])
  Room        Room[]

  @@map("wards")
}
